{
  "hash": "093871986d003f84ff653194afdd9412",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Synthetic data\"\ndescription: |\n  Simulation\nauthor: Kevn Gilds, MPA\ndate: 2023-11-04\ncategories:\n -Stats\n---\n\n\n\nAndrew Heiss teaches Program Evaluation and has wonderful resources for Sampling with R and Synthetic Data.\n\n<https://evalsp23.classes.andrewheiss.com/example/random-numbers.html>\n\n<https://evalsp23.classes.andrewheiss.com/example/synthetic-data.html>\n\nI will be playing with the examples from these sites and hopefully not copying it.\n\nHeiss, A. (2023-11-18) Program Evaluation . <https://evalsp23.classes.andrewheiss.com/example/random-numbers.html>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(patchwork)\nlibrary(truncnorm)\n```\n:::\n\n\n\n## Set Seeds\n\nI asked for 5 random numbers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(110772)\n\nsample(1:10, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 4 3\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(110772)\n\nsample(1:10, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 4 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\n# Choose 3 numbers between 1 and 10\nsample(1:10, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  6  5\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(1:10, 3) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9 5 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nsample(1:10, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  6  5\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(1:10, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9 5 6\n```\n\n\n:::\n:::\n\n\n\n## Uniform Distributions\n\nEvery number is equally likely to be drawn\n\nTwo base r functions: `sample` `runif`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npossible_answers <- c(1:6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(possible_answers, size = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(possible_answers, size = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 6 5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(possible_answers, size = 10, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 6 4 6 6 6 4 4 5 4 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(possible_answers, size = 8)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ndie <- tibble(value = sample(possible_answers,\n                             size = 1000,\n                             replace = TRUE))\ndie %>%\n  count(value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n  value     n\n  <int> <int>\n1     1   161\n2     2   153\n3     3   188\n4     4   149\n5     5   157\n6     6   192\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(die, aes(x = value)) +\n  geom_bar() +\n  labs(title = \"1,000 rolls of a single die\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThe reason they are not the same is because of randomness.\n\nThe next example increases the sample size--central limit theorem.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ndie <- tibble(value = sample(possible_answers,\n                             size = 100000,\n                             replace = TRUE))\n\nggplot(die, aes(x = value)) +\n  geom_bar() +\n  labs(title = \"100,000 rolls of a single die\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nThe `runif` function which means random uniform functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.09862408 0.96294192 0.88655414 0.05623182 0.44451637\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1] 0.09862 0.96294 0.88655 0.05623 0.44452\n```\n:::\n\n\n\nIndicate a range\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(5, min = 35, max = 56)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46.82529 42.88636 37.74566 53.22182 46.13240\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1] 46.83 42.89 37.75 53.22 46.13\n```\n:::\n\n\n\nWhat if I need whole numbers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate 5 people between the ages of 18 and 35\nround(runif(5, min = 18, max = 35), 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21 28 33 34 31\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1] 21 28 33 34 31\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nlots_of_numbers <- tibble(x = runif(5000, min = 18, max = 35))\n\nggplot(lots_of_numbers, aes(x = x)) +\n  geom_histogram(binwidth = 1, color = \"white\", boundary = 18)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## Normal Distribution\n\nContrast with a uniform distribution. Most data clusters around a center of graviity.\n\n> Each distribution is defined by different things called parameters or values that determine the shape of the probabilities and location of clusters.\n\nA normal distribution has two parameters.\n\n1.  mean\n2.  standard deviation\n\n`rnorm` takes there arguments:\n\n1.  The number of numbers one wants to generate\n2.  the mean default is 0\n3.  standard deviation default is 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.3662376  0.5392093 -1.3219320 -0.2812887 -2.1049469\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1] -1.3662  0.5392 -1.3219 -0.2813 -2.1049\n\n# Cluster around 10, with an SD of 4\nrnorm(5, mean = 10, sd = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3.529581  7.105072 11.226964 10.902385 13.742864\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1]  3.530  7.105 11.227 10.902 13.743\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nplot_data <- tibble(x = rnorm(1000, mean = 10, sd = 4))\nhead(plot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 1\n       x\n   <dbl>\n1  5.17 \n2 11.1  \n3 14.3  \n4  0.617\n5 11.7  \n6 12.0  \n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 1\n##        x\n##    <dbl>\n## 1  5.17 \n## 2 11.1  \n## 3 14.3  \n## 4  0.617\n## 5 11.7  \n## 6 12.0\n\nggplot(plot_data, aes(x = x)) +\n  geom_histogram(binwidth = 1, boundary = 0, color = \"white\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nfake_people <- tibble(income = rnorm(1000, mean = 40000, sd = 15000),\n                      age = rnorm(1000, mean = 25, sd = 8),\n                      education = rnorm(1000, mean = 16, sd = 4))\nhead(fake_people)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 3\n  income   age education\n   <dbl> <dbl>     <dbl>\n1 21894. 15.4      12.1 \n2 44161. 27.4      15.6 \n3 56267. 12.7      15.6 \n4  4815. 30.1      20.8 \n5 46437. 30.6       9.38\n6 47591.  9.75     11.8 \n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 3\n##   income   age education\n##    <dbl> <dbl>     <dbl>\n## 1 21894. 15.4      12.1 \n## 2 44161. 27.4      15.6 \n## 3 56267. 12.7      15.6 \n## 4  4815. 30.1      20.8 \n## 5 46437. 30.6       9.38\n## 6 47591.  9.75     11.8\n\nfake_income <- ggplot(fake_people, aes(x = income)) +\n  geom_histogram(binwidth = 5000, color = \"white\", boundary = 0) +\n  labs(title = \"Simulated income\")\n\nfake_age <- ggplot(fake_people, aes(x = age)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0) +\n  labs(title = \"Simulated age\")\n\nfake_education <- ggplot(fake_people, aes(x = education)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0) +\n  labs(title = \"Simulated education\")\n\nfake_income + fake_age + fake_education\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### Challenges of the Normal Distribution\n\nOne needs to plot these to get them looking correctly. Trial and error until the data looks reasonable. You may also wind up with negative numbers when that does not make any sense. You may need to do a truncated normal distribution check out this ðŸ“¦ <https://github.com/olafmersmann/truncnorm> This has a function that has arguments that sets an optional max and min value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nplot_data <- tibble(fake_age = rnorm(1000, mean = 14, sd = 5))\nhead(plot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 1\n  fake_age\n     <dbl>\n1     7.96\n2    15.4 \n3    19.4 \n4     2.27\n5    16.1 \n6    16.5 \n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 1\n##   fake_age\n##      <dbl>\n## 1     7.96\n## 2    15.4 \n## 3    19.4 \n## 4     2.27\n## 5    16.1 \n## 6    16.5\n\nggplot(plot_data, aes(x = fake_age)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(truncnorm)  # For rtruncnorm()\n\nset.seed(1234)\n\nplot_data <- tibble(fake_age = rtruncnorm(1000, mean = 14, sd = 5, a = 12, b = 21))\nhead(plot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 1\n  fake_age\n     <dbl>\n1     15.4\n2     19.4\n3     16.1\n4     16.5\n5     14.3\n6     18.8\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 1\n##   fake_age\n##      <dbl>\n## 1     15.4\n## 2     19.4\n## 3     16.1\n## 4     16.5\n## 5     14.3\n## 6     18.8\n\nggplot(plot_data, aes(x = fake_age)) +\n  geom_histogram(binwidth = 1, color = \"white\", boundary = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## Beta Distribution\n\nI feel I need to understand this distribution but it is not quite sinking in.\n\nBeta distributions range from 0-1 and take the arguments of shape1 and shape2 and useful for percentages--thinking batting averages. This [post](https://stats.stackexchange.com/questions/47771/what-is-the-intuition-behind-beta-distribution/47782#47782) is helpful. The formula is helpful--if I can display it correctly\n\n$$\n\\frac{6}{6 + 4}\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nplot_data <- tibble(exam_score = rbeta(1000, shape1 = 6, shape2 = 4)) %>%\n  # rbeta() generates numbers between 0 and 1, so multiply everything by 10 to\n  # scale up the exam scores\n  mutate(exam_score = exam_score * 10)\n\nggplot(plot_data, aes(x = exam_score)) +\n  geom_histogram(binwidth = 1, color = \"white\") +\n  scale_x_continuous(breaks = 0:10)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n### Plotting Beta\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 6, shape2 = 4))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 60, shape2 = 40))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 9, shape2 = 1), color = \"blue\") +\n  geom_function(fun = ~dbeta(.x, shape1 = 1, shape2 = 9), color = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 5, shape2 = 5), color = \"blue\") +\n  geom_function(fun = ~dbeta(.x, shape1 = 2, shape2 = 5), color = \"red\") +\n  geom_function(fun = ~dbeta(.x, shape1 = 80, shape2 = 23), color = \"orange\") +\n  geom_function(fun = ~dbeta(.x, shape1 = 13, shape2 = 17), color = \"brown\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\nOkay, I see it now-- its the percentage not the total and that is what I am trying to figure it out. The distributions are split up almost in quarters and if you are interested in the red distribution one could fiddle with shape1 at 2 and shape 2 at 5. ##E\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nplot_data <- tibble(thing = rbeta(1000, shape1 = 2, shape2 = 5)) %>%\n  mutate(thing = thing * 100)\nhead(plot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 1\n  thing\n  <dbl>\n1 10.1 \n2 34.5 \n3 55.3 \n4  2.19\n5 38.0 \n6 39.9 \n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 1\n##   thing\n##   <dbl>\n## 1 10.1 \n## 2 34.5 \n## 3 55.3 \n## 4  2.19\n## 5 38.0 \n## 6 39.9\n\nggplot(plot_data, aes(x = thing)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n## Binomial Distributions\n\nFields that are binary; yes/no, treated/untreated.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\n# Choose 5 random T/F values\npossible_things <- c(TRUE, FALSE)\nsample(possible_things, 5, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1] FALSE FALSE FALSE FALSE  TRUE\n```\n:::\n\n\n\nBy default R will choose a uniform distribution. One can tinker with the probability\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ncandidates <- c(\"Person 1\", \"Person 2\")\nsample(candidates, size = 1, prob = c(0.8, 0.2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Person 1\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1] \"Person 1\"\n```\n:::\n\n\n\nWe may want to see all the possibilities.\n\n1.  <div>\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    set.seed(1234)\n    fake_elections <- tibble(winner = sample(candidates,\n                                             size = 1000,\n                                             prob = c(0.8, 0.2),\n                                             replace = TRUE))\n    fake_elections %>%\n      count(winner)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 2 Ã— 2\n      winner       n\n      <chr>    <int>\n    1 Person 1   792\n    2 Person 2   208\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    ## # A tibble: 2 Ã— 2\n    ##   winner       n\n    ##   <chr>    <int>\n    ## 1 Person 1   792\n    ## 2 Person 2   208\n    \n    ggplot(fake_elections, aes(x = winner)) +\n      geom_bar()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n    :::\n    :::\n\n\n\n    </div>\n\nThe `rbinom`has two arguments;\n\n1.  size: the number of times a thing happens\n\n2.  prob: the probability\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nrbinom(5, size = 20, prob = 0.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15 11 11 11 10\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1] 15 11 11 11 10\n```\n:::\n\n\n\nA better way to do i\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nrbinom(5, size = 1, prob = 0.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 0 0 0\n```\n\n\n:::\n\n```{.r .cell-code}\n## [1] 1 0 0 0 0\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\n\nplot_data <- tibble(thing = rbinom(2000, 1, prob = 0.6)) %>%\n  # Make this a factor since it's basically a yes/no categorical variable\n  mutate(thing = factor(thing))\n\nplot_data %>%\n  count(thing) %>%\n  mutate(proportion = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 3\n  thing     n proportion\n  <fct> <int>      <dbl>\n1 0       840       0.42\n2 1      1160       0.58\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 2 Ã— 3\n##   thing     n proportion\n##   <fct> <int>      <dbl>\n## 1 0       840       0.42\n## 2 1      1160       0.58\n\nggplot(plot_data, aes(x = thing)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n## Poisson Distribution\n\nIndependent random events that combine into grouped events. For example, traffic, number of people coming into a coffee shop; when they leave the coffee shop.\n\nThe function for this distribution is `rpois` and takes one argument:\n\n1.  lambda rate or speed the process follows. How fast a process increases fro 1 to two.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n# 10 different families\nrpois(10, lambda = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 2 1 2 3 0 1 2 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\n##  [1] 0 2 1 2 3 0 1 2 1 1\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nplot_data <- tibble(num_kids = rpois(500, lambda = 1))\nhead(plot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 1\n  num_kids\n     <int>\n1        0\n2        1\n3        1\n4        1\n5        2\n6        1\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 1\n##   num_kids\n##      <int>\n## 1        0\n## 2        1\n## 3        1\n## 4        1\n## 5        2\n## 6        1\n\nplot_data %>%\n  group_by(num_kids) %>%\n  summarize(count = n()) %>%\n  mutate(proportion = count / sum(count))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 3\n  num_kids count proportion\n     <int> <int>      <dbl>\n1        0   180      0.36 \n2        1   187      0.374\n3        2    87      0.174\n4        3    32      0.064\n5        4    11      0.022\n6        5     3      0.006\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 3\n##   num_kids count proportion\n##      <int> <int>      <dbl>\n## 1        0   180      0.36 \n## 2        1   187      0.374\n## 3        2    87      0.174\n## 4        3    32      0.064\n## 5        4    11      0.022\n## 6        5     3      0.006\n\nggplot(plot_data, aes(x = num_kids)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\nNow we play with the lambda and see how the results change\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nplot_data <- tibble(num_kids = rpois(500, lambda = 2))\nhead(plot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 1\n  num_kids\n     <int>\n1        0\n2        2\n3        2\n4        2\n5        4\n6        2\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 1\n##   num_kids\n##      <int>\n## 1        0\n## 2        2\n## 3        2\n## 4        2\n## 5        4\n## 6        2\n\nplot_data %>%\n  group_by(num_kids) %>%\n  summarize(count = n()) %>%\n  mutate(proportion = count / sum(count))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 3\n  num_kids count proportion\n     <int> <int>      <dbl>\n1        0    62      0.124\n2        1   135      0.27 \n3        2   145      0.29 \n4        3    88      0.176\n5        4    38      0.076\n6        5    19      0.038\n7        6    10      0.02 \n8        7     3      0.006\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 8 Ã— 3\n##   num_kids count proportion\n##      <int> <int>      <dbl>\n## 1        0    62      0.124\n## 2        1   135      0.27 \n## 3        2   145      0.29 \n## 4        3    88      0.176\n## 5        4    38      0.076\n## 6        5    19      0.038\n## 7        6    10      0.02 \n## 8        7     3      0.006\n\nggplot(plot_data, aes(x = num_kids)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n## Rescaling Numbers\n\nNot all distributions have a truncated version; the next section shows how to do this with the `rescale` function from the scales ðŸ“¦\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 2, shape2 = 5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nfake_people <- tibble(income = rbeta(1000, shape1 = 2, shape2 = 5))\n\nggplot(fake_people, aes(x = income)) +\n  geom_histogram(binwidth = 0.1, color = \"white\", boundary = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\n\nfake_people_scaled <- fake_people %>%\n  mutate(income_scaled = rescale(income, to = c(10000, 100000)))\nhead(fake_people_scaled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n  income income_scaled\n   <dbl>         <dbl>\n1 0.101         21154.\n2 0.345         49014.\n3 0.553         72757.\n4 0.0219        12176.\n5 0.380         53036.\n6 0.399         55162.\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 2\n##   income income_scaled\n##    <dbl>         <dbl>\n## 1 0.101         21154.\n## 2 0.345         49014.\n## 3 0.553         72757.\n## 4 0.0219        12176.\n## 5 0.380         53036.\n## 6 0.399         55162.\n\nggplot(fake_people_scaled, aes(x = income_scaled)) +\n  geom_histogram(binwidth = 5000, color = \"white\", boundary = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nfake_data <- tibble(age_not_scaled = rnorm(1000, mean = 0, sd = 1)) %>%\n  mutate(age = rescale(age_not_scaled, to = c(18, 65)))\nhead(fake_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n  age_not_scaled   age\n           <dbl> <dbl>\n1         -1.21   33.6\n2          0.277  44.2\n3          1.08   49.9\n4         -2.35   25.5\n5          0.429  45.3\n6          0.506  45.8\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 2\n##   age_not_scaled   age\n##            <dbl> <dbl>\n## 1         -1.21   33.6\n## 2          0.277  44.2\n## 3          1.08   49.9\n## 4         -2.35   25.5\n## 5          0.429  45.3\n## 6          0.506  45.8\n\nplot_unscaled <- ggplot(fake_data, aes(x = age_not_scaled)) +\n  geom_histogram(binwidth = 0.5, color = \"white\", boundary = 0)\n\nplot_scaled <- ggplot(fake_data, aes(x = age)) +\n  geom_histogram(binwidth = 5, color = \"white\", boundary = 0)\n\nplot_unscaled + plot_scaled\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n## Making your own world\n\nThe code below provides examples of creating fake data sets; these don't\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\n# Set the number of people here once so it's easier to change later\nn_people <- 1000\n\nexample_fake_people <- tibble(\n  id = 1:n_people,\n  opinion = sample(1:5, n_people, replace = TRUE),\n  age = runif(n_people, min = 18, max = 80),\n  income = rnorm(n_people, mean = 50000, sd = 10000),\n  education = rtruncnorm(n_people, mean = 16, sd = 6, a = 8, b = 24),\n  happiness = rbeta(n_people, shape1 = 2, shape2 = 1),\n  treatment = sample(c(TRUE, FALSE), n_people, replace = TRUE, prob = c(0.3, 0.7)),\n  size = rbinom(n_people, size = 1, prob = 0.5),\n  family_size = rpois(n_people, lambda = 1) + 1  # Add one so there are no 0s\n) %>%\n  # Adjust some of these columns\n  mutate(opinion = recode(opinion, \"1\" = \"Strongly disagree\",\n                          \"2\" = \"Disagree\", \"3\" = \"Neutral\",\n                          \"4\" = \"Agree\", \"5\" = \"Strongly agree\")) %>%\n  mutate(size = recode(size, \"0\" = \"Small\", \"1\" = \"Large\")) %>%\n  mutate(happiness = rescale(happiness, to = c(1, 8)))\n\nhead(example_fake_people)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 9\n     id opinion       age income education happiness treatment size  family_size\n  <int> <chr>       <dbl>  <dbl>     <dbl>     <dbl> <lgl>     <chr>       <dbl>\n1     1 Agree        31.7 43900.      18.3      7.20 TRUE      Large           1\n2     2 Disagree     52.9 34696.      17.1      4.73 TRUE      Large           2\n3     3 Strongly aâ€¦  45.3 43263.      17.1      7.32 FALSE     Large           4\n4     4 Agree        34.9 40558.      11.7      4.18 FALSE     Small           2\n5     5 Strongly dâ€¦  50.3 41392.      13.3      2.61 TRUE      Small           2\n6     6 Strongly aâ€¦  63.6 69917.      11.2      4.36 FALSE     Small           2\n```\n\n\n:::\n\n```{.r .cell-code}\n## # A tibble: 6 Ã— 9\n##      id opinion             age income education happiness treatment size  family_size\n##   <int> <chr>             <dbl>  <dbl>     <dbl>     <dbl> <lgl>     <chr>       <dbl>\n## 1     1 Agree              31.7 43900.      18.3      7.20 TRUE      Large           1\n## 2     2 Disagree           52.9 34696.      17.1      4.73 TRUE      Large           2\n## 3     3 Strongly agree     45.3 43263.      17.1      7.32 FALSE     Large           4\n## 4     4 Agree              34.9 40558.      11.7      4.18 FALSE     Small           2\n## 5     5 Strongly disagree  50.3 41392.      13.3      2.61 TRUE      Small           2\n## 6     6 Strongly agree     63.6 69917.      11.2      4.36 FALSE     Small           2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_opinion <- ggplot(example_fake_people, aes(x = opinion)) +\n  geom_bar() +\n  guides(fill = \"none\") +\n  labs(title = \"Opinion (uniform with sample())\")\n\nplot_age <- ggplot(example_fake_people, aes(x = age)) +\n  geom_histogram(binwidth = 5, color = \"white\", boundary = 0) +\n  labs(title = \"Age (uniform with runif())\")\n\nplot_income <- ggplot(example_fake_people, aes(x = income)) +\n  geom_histogram(binwidth = 5000, color = \"white\", boundary = 0) +\n  labs(title = \"Income (normal)\")\n\nplot_education <- ggplot(example_fake_people, aes(x = education)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0) +\n  labs(title = \"Education (truncated normal)\")\n\nplot_happiness <- ggplot(example_fake_people, aes(x = happiness)) +\n  geom_histogram(binwidth = 1, color = \"white\") +\n  scale_x_continuous(breaks = 1:8) +\n  labs(title = \"Happiness (Beta, rescaled to 1-8)\")\n\nplot_treatment <- ggplot(example_fake_people, aes(x = treatment)) +\n  geom_bar() +\n  labs(title = \"Treatment (binary with sample())\")\n\nplot_size <- ggplot(example_fake_people, aes(x = size)) +\n  geom_bar() +\n  labs(title = \"Size (binary with rbinom())\")\n\nplot_family <- ggplot(example_fake_people, aes(x = family_size)) +\n  geom_bar() +\n  scale_x_continuous(breaks = 1:7) +\n  labs(title = \"Family size (Poisson)\")\n\n(plot_opinion + plot_age) / (plot_income + plot_education)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(plot_happiness + plot_treatment) / (plot_size + plot_family)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n## Finish\n\nFor my purposes, I want to simulate something to the opinion. However, my data reference is not uniform so I could put in my mean and sd and to get an accurate simulation.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}