{
  "hash": "aa0baeeff2e0fb3f48fddac74e05dfae",
  "result": {
    "markdown": "---\ntitle: Pets\nauthor: Kevin\ndate: '2019-03-27'\nslug: pets\ncategories:\n  - R\n\ntags:\n  - TidyTuesday\n---\n\n\n# Introduction\n\nThe [TidyTuesday](https://github.com/rfordatascience/tidytuesday) project for March 27, 2019 consisted of Pet Registrations from Seattle. I had the good fortune to work with this data set prior on a Chromebook Data Science data visualization project.\n\n### Load Libraries\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n:::\n:::\n\n\n### Read in the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseattle_pets <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-26/seattle_pets.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 52519 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): license_issue_date, license_number, animals_name, species, primary_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n### Explore the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(seattle_pets)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 52,519\nColumns: 7\n$ license_issue_date <chr> \"November 16 2018\", \"November 11 2018\", \"November 2…\n$ license_number     <chr> \"8002756\", \"S124529\", \"903793\", \"824666\", \"S119138\"…\n$ animals_name       <chr> \"Wall-E\", \"Andre\", \"Mac\", \"Melb\", \"Gingersnap\", \"Co…\n$ species            <chr> \"Dog\", \"Dog\", \"Dog\", \"Cat\", \"Cat\", \"Dog\", \"Dog\", \"C…\n$ primary_breed      <chr> \"Mixed Breed, Medium (up to 44 lbs fully grown)\", \"…\n$ secondary_breed    <chr> \"Mix\", \"Dachshund, Standard Wire Haired\", NA, NA, \"…\n$ zip_code           <chr> \"98108\", \"98117\", \"98136\", \"98117\", \"98144\", \"98103…\n```\n:::\n:::\n\n\n### Exploratory Graphs\n\nFrom this graph we learn that there are many more dogs registered than cats.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseattle_pets %>%\n  ggplot(aes(x = species)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic-bar-1.png){width=672}\n:::\n:::\n\n\nThis line chart proivdes the framework for a polished graph below. The code chunk below uses a one two punch with with lubridate and zoo to work with the dates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## add date and ym columns\nseattle_pets$date <- lubridate::mdy(seattle_pets$license_issue_date)\nseattle_pets$ym <- zoo::as.yearmon(seattle_pets$date, \"%y%m\")\n\n## how the number of licenses recorded has changed over time\nseattle_pets %>%\n  ## group by yearmonth (`ym`)\n  group_by(ym) %>% \n  ## count number within each group\n  summarise(n=n()) %>%\n  ggplot(., aes(ym, n)) + \n  ## geom name for line chart\n  geom_line() +\n  scale_x_yearmon() + \n  xlab(\"\") + \n  ylab(\"Number of licenses\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/line-chart-1.png){width=672}\n:::\n:::\n\n\n### Explanatory Graph\n\nThe data spans many years when there were no registrations or licences; I was able to use the filter function to emphasis that registrations were very limited prior to January 2017. In January 2017 you are able to observe the number of registrations increase from January 2017 and peaking in February 2018.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## add date and ym columns\nseattle_pets$date <- lubridate::mdy(seattle_pets$license_issue_date)\nseattle_pets$ym <- zoo::as.yearmon(seattle_pets$date, \"%y%m\")\n\n## how the number of licenses recorded has changed over time\nseattle_pets %>%\n  ## group by yearmonth (`ym`)\n  filter(ym > \"June 2015\") %>%\n  group_by(ym) %>% \n  ## count number within each group\n  count(species) %>%\n  ggplot(., aes(ym, n, group = species, color = species)) + \n  ## geom name for line chart\n  geom_line() +\n  scale_x_yearmon() + \n  xlab(\"\") +\n  ylab(\"Number of licenses\") +\n  scale_colour_manual(values = c(\"blue\",\"red3\",\"white\", \"grey\")) +\n  theme_fivethirtyeight() +\n  labs(title = \"Change in Licenses Over Time\") +\n  labs(caption = \"Seattle Open Data Portal\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/line-graph-1.png){width=672}\n:::\n:::\n\n\n### Explanatory Bar Charts\n\nThe mutate statement here along with the reorder statement puts the bar graph in order. I saw another example where you can use reorder within the aes statement in ggplot2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_p <- seattle_pets %>%\n  filter(species == \"Cat\", animals_name != \"\") %>%\n  group_by(animals_name) %>% \n  summarise(n = n()) %>% \n  filter(n >49) %>%\n  mutate(animals_name = reorder(animals_name, n)) %>%\n  ggplot(aes(x = animals_name, y =n)) + \n  geom_bar(stat=\"identity\") +\n  coord_flip() +\n  theme_fivethirtyeight() +\n   theme         (axis.text = element_text(size = 14), \n                title = element_text(size = 16), \n                legend.position=\"none\", \n                plot.caption=element_text(size = 12), \n                panel.grid.major = element_blank(), \n                panel.grid.minor = element_blank(),\n                axis.text.x = element_blank() ) +\n \n  labs(title = \"Top Registered Cat Names in Seattle\") +\n  labs(subtitle = \"Cat Names with at least 50 observations\") +\n  labs(caption = \"Seattle's Open Data Portal\") +\n  ylab(\"Name Count\") +\n  xlab(\"Cat Name\")+\n  geom_text(aes(label = paste0(as.integer(n)),\n                x = animals_name,\n                y = n, \n            stat= \"identity\", \n            hjust = -0.2, \n            \n  \n            ))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Ignoring unknown aesthetics: stat\n```\n:::\n\n```{.r .cell-code}\ncat_p\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/cat-p-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_p <- seattle_pets %>%\n  filter(species == \"Dog\", animals_name != \"\") %>%\n  group_by(animals_name) %>% \n  summarise(n = n()) %>% \n  filter(n >149) %>%\n  mutate(animals_name = reorder(animals_name, n)) %>%\n  ggplot(aes(x = animals_name, y =n)) + \n  geom_bar(stat=\"identity\") +\n  coord_flip() +\n  theme_fivethirtyeight() +\n  theme         (axis.text = element_text(size = 14), \n                title = element_text(size = 16), \n                legend.position=\"none\", \n                plot.caption=element_text(size = 12), \n                panel.grid.major = element_blank(), \n                panel.grid.minor = element_blank(),\n                axis.text.x = element_blank() ) +\n  labs(title = \"Top Registered Dog Names in Seattle\") +\n  labs(subtitle = \"Dog Names with at least 150 observations\") +\n  labs(caption = \"Seattle's Open Data Portal\") +\n  ylab(\"Name Count\") +\n  xlab(\"Dog Name\")+\n  geom_text(aes(label = paste0(as.integer(n)),\n                x = animals_name,\n                y = n, \n            stat= \"identity\", \n            hjust = -0.2, \n            ))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Ignoring unknown aesthetics: stat\n```\n:::\n\n```{.r .cell-code}\ndog_p\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/dog-p-1.png){width=672}\n:::\n:::\n\n\n# Conclusion\n\nI played with the five_thirtyeight theme and it worked well. I think it would work better with some colors in the bar plot but I am not sure how I would want to color this graph.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}