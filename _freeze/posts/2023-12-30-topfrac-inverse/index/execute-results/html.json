{
  "hash": "c3d7444aa2ea154c090e855bd8ab4405",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Top_frac Inverse\"\ndescription: |\n  Getting to the bottom half\nauthor: Kevn Gilds, MPA\ndate: 2023-12-30\ncategories:\n -Chat-GPT, DPLYR\n---\n\n\nI had a graph in a Shiny Application that had too many values and the values were getting scrunched up. I determined to add a tab panel and display multiple views.\n\nI used `top_frac` function from the dplyr ðŸ“¦.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_sites <- reactive({\n        sites_program() %>%\n        dplyr::group_by(time) %>%\n        dplyr::count(site)%>%\n        dplyr::top_frac(.5)\n})\n```\n:::\n\n\nMy next dilemma was getting the bottom half. I used Chat-GPT and here is the [transcript](https://chat.openai.com/share/6c109ae4-330a-4c86-8f6a-ce57f3cabada).\n\nI was able to take the example and apply to my data set. This would have taken me hours to figure our prior to this assistance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbottom_sites <- reactive({\n      bottom_frac <- 0.5\n      result <- sites_program() %>%\n        dplyr::group_by(time) %>%\n        dplyr::count(site)%>%\n        arrange(n) %>%\n        slice(1:floor(n() * bottom_frac))\n      \n    })\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}